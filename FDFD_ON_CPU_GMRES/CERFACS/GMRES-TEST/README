This directory contains example files to illustrate the use of our
GMRES package.  The four arithmetic are treated (real-single, real-double,
complex-single, complex-double).

Contents of the directory:
==========================
 Testers:
 --------
-rw-r--r--   1 algosoft  1000  4965 Sep 29 14:52 cDriver.f
-rw-r--r--   1 algosoft  1000  9820 Sep 29 14:57 cParDriver.f
-rw-r--r--   1 algosoft  1000  4949 Sep 29 14:52 dDriver.f
-rw-r--r--   1 algosoft  1000  9849 Sep 29 14:57 dParDriver.f
-rw-r--r--   1 algosoft  1000  4913 Sep 29 14:52 sDriver.f
-rw-r--r--   1 algosoft  1000  9753 Sep 29 14:57 sParDriver.f
-rw-r--r--   1 algosoft  1000  4991 Sep 29 14:52 zDriver.f
-rw-r--r--   1 algosoft  1000  9881 Sep 29 14:57 zParDriver.f

 Directory with input and output files from sequential/parallel tests:
 ---------------------------------------------------------------------
 in : input file used for all the subsequent output files

 Sequential output: convergence history
-rw-r--r--   1 algosoft  1000  1569 Sep 29 16:28 fort.10
-rw-r--r--   1 algosoft  1000  1569 Sep 29 16:28 fort.20
-rw-r--r--   1 algosoft  1000  1535 Sep 29 16:28 fort.30
-rw-r--r--   1 algosoft  1000  1535 Sep 29 16:28 fort.40

 Sequential output: solution
-rw-r--r--   1 algosoft  1000  205 Sep 29 16:28 sol_cTest
-rw-r--r--   1 algosoft  1000  205 Sep 29 16:28 sol_dTest
-rw-r--r--   1 algosoft  1000  203 Sep 29 16:28 sol_sTest
-rw-r--r--   1 algosoft  1000  205 Sep 29 16:28 sol_zTest

 Parallel output (nproc = 4): convergence history
-rw-------   1 algosoft  1000  1571 Sep 29 16:29 fort.11
-rw-------   1 algosoft  1000  1571 Sep 29 16:28 fort.21
-rw-------   1 algosoft  1000  1503 Sep 29 16:28 fort.31
-rw-------   1 algosoft  1000  1503 Sep 29 16:28 fort.41

 Parallel output (nproc = 4): solution
-rw-------   1 algosoft  1000  327 Sep 29 16:29 sol_cTest_Par
-rw-------   1 algosoft  1000  330 Sep 29 16:28 sol_dTest_Par
-rw-------   1 algosoft  1000  501 Sep 29 16:28 sol_zTest_Par


-------------------------------------------------------------------------
The test programs are making use the BLAS routine _GEMV, _TRSM and _COPY.
You should update the makefile to set up the link with your BLAS library.
If you do not have the BLAS routine, you can download them from the Netlib
website (www.netlib.org/blas).

There are examples for both sequential and parallel codes.
The parallel versions are based on MPI.

Sequential testers 
------------------
 We describe all the arithmetics at once and
have the following convention to distinguish among them:
    single real    : X=s and Y=10
    double real    : X=d and Y=20
    single complex : X=c and Y=30
    double complex : X=z and Y=40

1. Once you have obtained by email the GMRES package corresponding to real
   single arithmetic, save it in the file "XPackgmres.f" 
2. Update the makefile to set properly the link with BLAS
3. Compile with the command "make Xarith"
4. The executable is "XDriver"
5. The execution generates two files: "fort.Y" and "sol_XTest"
6. If you run "XDriver < in" the two generated file can be compared
   with those stored in the subdirectory "Results"

Parallel testers
________________
We describe all the arithmetics at once and
have the following convention to distinguish among them:
    single real    : X=s and Y=11
    double real    : X=d and Y=21
    single complex : X=c and Y=31
    double complex : X=z and Y=41

1. Once you have obtained by email the GMRES package corresponding to real
   single arithmetic, save it in the file "XPackgmres.f"  
2. Update the makefile to set properly the link with BLAS
3. Compile with the command "make Xarith"
4. The executable is "XParDriver"
5. The execution generates two files: "fort.Y" and "sol_XTest_Par"
6. If you run " mpirun -np #proc XParDriver < in" the two generated file can be compared
   with those stored in the subdirectory "Results"
   In that case the size of the local matrix is the same on all processes.


The test matrix is generated by the test programm. It is a tridiagonal matrix.
The matrix size is chosen by the user at run-time. The right-hand
side is so that the exact solution is the vector of all ones.
The execution generates two files, one containing the history of the
computation, the other one containing the computed solution.

Below is the contents of the output file for the solution of
a complex double precision matrix of order 10 with a restart equal to 3.
obtained on a Sun machine with the BLAS of the library sunperf.

prompt% zDriver
 ***********************************************
 This code is an example of use of GMRES
 in double precision complex arithmetic
 Results are written in output files
 fort.40 and sol_zTest
 ***********************************************
 
 Matrix size <   1000
10
 Restart  <  60
3
 
  WARNING : For M =   3 optimal value 
            for LWORK =    106
 
prompt%

* Contents of the output file fort.40:
======================================
                   CONVERGENCE HISTORY FOR GMRES

Errors are displayed in unit:  6
Warnings are displayed in unit:  6
Matrix size:      10
Local matrix size:      10
Restart:       3
No preconditioning
Modified Gram-Schmidt
Default initial guess x_0 = 0
True residual computed at restart
Maximum number of iterations:  1000
Tolerance for convergence:  .10E-04
Backward error on the unpreconditioned system Ax = b:
    the residual is normalised by ||b||
Backward error on the preconditioned system (P1)A(P2)y = (P1)b:
    the preconditioned residual is normalised by ||(P1)b||
Optimal size for the local workspace:    106

Convergence history: b.e. on the preconditioned system
 Iteration   Arnoldi b.e.    True b.e.
    1            .53E+00       --
    2            .21E+00       --
    3            .10E+00       --
    4            .61E-01       --
    5            .29E-01       --
    6            .14E-01       --
    7            .85E-02       --
    8            .42E-02       --
    9            .22E-02       --
   10            .11E-02       --
   11            .49E-03       --
   12            .28E-03       --
   13            .17E-03       --
   14            .85E-04       --
   15            .41E-04       --
   16            .23E-04       --
   17            .90E-05        .90E-05

Convergence achieved
B.E. on the preconditioned system:    .90E-05
B.E. on the unpreconditioned system:  .90E-05
info(1) =  0
Number of iterations (info(2)):    17
